'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SessionData = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _errors = require('../errors');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SESSION_VERSION = '1.0.0';

var SessionData = exports.SessionData = function () {

  // using this in place of
  // window.localStorage.setItem(BLOCKSTACK_STORAGE_LABEL, JSON.stringify(userData))
  // required after sign in

  function SessionData(options) {
    _classCallCheck(this, SessionData);

    this.version = SESSION_VERSION;
    this.appPrivateKey = options.appPrivateKey;
    this.identityAddress = options.identityAddress;
    this.username = options.username;
    this.coreNode = options.coreNode;
    this.hubUrl = options.hubUrl;
    this.userData = options.userData;
    this.transitKey = options.transitKey;

    // initializing Gaia connection requires a network request
    // so we'll defer it until the first time it's needed
    this.gaiaHubConfig = null;
  } // required after sign in

  // required after sign in

  _createClass(SessionData, [{
    key: 'getGaiaHubConfig',
    value: function getGaiaHubConfig() {
      return this.gaiaHubConfig;
    }
  }, {
    key: 'setGaiaHubConfig',
    value: function setGaiaHubConfig(config) {
      this.gaiaHubConfig = config;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return JSON.stringify(this);
    }
  }], [{
    key: 'fromJSON',
    value: function fromJSON(json) {
      if (json.version !== SESSION_VERSION) {
        throw new _errors.InvalidStateError('JSON data version ' + json.version + ' not supported by SessionData');
      }
      var options = {
        appPrivateKey: json.appPrivateKey,
        identityAddress: json.identityAddress,
        username: json.username,
        coreNode: json.coreNode,
        hubUrl: json.hubUrl,
        userData: json.userData,
        transitKey: json.transitKey
      };
      return new SessionData(options);
    }
  }]);

  return SessionData;
}();