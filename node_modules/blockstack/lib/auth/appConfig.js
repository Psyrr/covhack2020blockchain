'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppConfig = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _authConstants = require('./authConstants');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Configuration data for the current app.
 *
 * On browser platforms, creating an instance of this
 * class without any arguments will use
 * `window.location.origin` as the app domain.
 * On non-browser platforms, you need to
 * specify an app domain as the first argument.
 * @type {AppConfig}
 */
var AppConfig = exports.AppConfig = function () {

  /**
   * @param {Array<string>} scopes - permissions this app is requesting
   * @param {string} appDomain - the app domain
   * @param {string} redirectPath - path on app domain to redirect users to after authentication
   * @param {string} manifestPath - path relative to app domain of app's manifest file
   * @param {string} coreNode - override the default or user selected core node
   * @param {string} authenticatorURL - the web-based fall back authenticator
   */


  /**
   * The URL of Blockstack core node to use for this app. If this is
   * `null`, the core node specified by the user or default core node
   * will be used.
   * @type {string}
   */


  /**
   * Path on app domain to redirect users to after authentication. The
   * authentication response token will be postpended in a query.
   * @type {string}
   */

  /**
   * Blockstack apps are uniquely identified by their app domain.
   * @type {string}
   */
  function AppConfig() {
    var scopes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _authConstants.DEFAULT_SCOPE.slice();
    var appDomain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.origin;
    var redirectPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var manifestPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/manifest.json';
    var coreNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var authenticatorURL = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _authConstants.DEFAULT_BLOCKSTACK_HOST;

    _classCallCheck(this, AppConfig);

    this.appDomain = appDomain;
    this.scopes = scopes;
    this.redirectPath = redirectPath;
    this.manifestPath = manifestPath;

    if (!coreNode) {
      this.coreNode = _authConstants.DEFAULT_CORE_NODE;
    } else {
      this.coreNode = coreNode;
    }

    this.authenticatorURL = authenticatorURL;
  }

  /**
   * The location to which the authenticator should
   * redirect the user.
   * @returns {string} - URI
   */


  /**
   * The URL of a web-based Blockstack Authenticator to use in the event
   * the user doesn't have Blockstack installed on their machine. If this
   * is not specified, the current default in this library will be used.
   * @type {string}
   */


  /**
   * Path relative to app domain of app's manifest file.
   *
   * This file needs to have CORS headers set so that it can be fetched
   * from any origin. Typically this means return the header `Access-Control-Allow-Origin: *`.
   * @type {string}
   */


  /**
   * An array of string representing permissions requested by the app.
   * @type {[Array<string>}
   */


  _createClass(AppConfig, [{
    key: 'redirectURI',
    value: function redirectURI() {
      return '' + this.appDomain + this.redirectPath;
    }

    /**
     * The location of the app's manifest file.
     * @returns {string} - URI
     */

  }, {
    key: 'manifestURI',
    value: function manifestURI() {
      return '' + this.appDomain + this.manifestPath;
    }
  }]);

  return AppConfig;
}();