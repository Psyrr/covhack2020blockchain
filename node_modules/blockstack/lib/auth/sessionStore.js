'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalStorageStore = exports.InstanceDataStore = exports.SessionDataStore = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
// import { BLOCKSTACK_GAIA_HUB_LABEL } from '../storage/hub'


var _sessionData = require('./sessionData');

var _authConstants = require('./authConstants');

var _errors = require('../errors');

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import { Logger } from '../logger'

/**
 * An abstract class representing the SessionDataStore interface.
 * @type {SessionData}
 */
var SessionDataStore = exports.SessionDataStore = function () {
  function SessionDataStore(sessionOptions) {
    _classCallCheck(this, SessionDataStore);

    if (sessionOptions) {
      var newSessionData = new _sessionData.SessionData(sessionOptions);
      this.setSessionData(newSessionData);
    }
  }

  _createClass(SessionDataStore, [{
    key: 'getSessionData',
    value: function getSessionData() {
      throw new Error('Abstract class');
    }

    /* eslint-disable */

  }, {
    key: 'setSessionData',
    value: function setSessionData(session) {
      throw new Error('Abstract class');
    }
  }, {
    key: 'deleteSessionData',
    value: function deleteSessionData() {
      throw new Error('Abstract class');
    }
    /* eslint-enable */

  }]);

  return SessionDataStore;
}();

/**
 * Stores session data in the instance of this class.
 * @type {InstanceDataStore}
 */


var InstanceDataStore = exports.InstanceDataStore = function (_SessionDataStore) {
  _inherits(InstanceDataStore, _SessionDataStore);

  function InstanceDataStore(sessionOptions) {
    _classCallCheck(this, InstanceDataStore);

    var _this = _possibleConstructorReturn(this, (InstanceDataStore.__proto__ || Object.getPrototypeOf(InstanceDataStore)).call(this, sessionOptions));

    if (!_this.sessionData) {
      _this.setSessionData(new _sessionData.SessionData({}));
    }
    return _this;
  }

  _createClass(InstanceDataStore, [{
    key: 'getSessionData',
    value: function getSessionData() {
      if (!this.sessionData) {
        throw new _errors.NoSessionDataError('No session data was found.');
      }
      return this.sessionData;
    }
  }, {
    key: 'setSessionData',
    value: function setSessionData(session) {
      this.sessionData = session;
      return true;
    }
  }, {
    key: 'deleteSessionData',
    value: function deleteSessionData() {
      this.setSessionData(new _sessionData.SessionData({}));
      return true;
    }
  }]);

  return InstanceDataStore;
}(SessionDataStore);

/**
 * Stores session data in browser a localStorage entry.
 * @type {LocalStorageStore}
 */


var LocalStorageStore = exports.LocalStorageStore = function (_SessionDataStore2) {
  _inherits(LocalStorageStore, _SessionDataStore2);

  function LocalStorageStore(sessionOptions) {
    _classCallCheck(this, LocalStorageStore);

    var _this2 = _possibleConstructorReturn(this, (LocalStorageStore.__proto__ || Object.getPrototypeOf(LocalStorageStore)).call(this, sessionOptions));

    if (sessionOptions && sessionOptions.storeOptions && sessionOptions.storeOptions.localStorageKey && sessionOptions.storeOptions.localStorageKey instanceof String) {
      _this2.key = sessionOptions.storeOptions.localStorageKey;
    } else {
      _this2.key = _authConstants.LOCALSTORAGE_SESSION_KEY;
    }

    var data = localStorage.getItem(_this2.key);
    if (!data) {
      var sessionData = new _sessionData.SessionData({});
      _this2.setSessionData(sessionData);
    }
    return _this2;
  }

  _createClass(LocalStorageStore, [{
    key: 'getSessionData',
    value: function getSessionData() {
      var data = localStorage.getItem(this.key);
      if (!data) {
        throw new _errors.NoSessionDataError('No session data was found in localStorage');
      }
      var dataJSON = JSON.parse(data);
      return _sessionData.SessionData.fromJSON(dataJSON);
    }
  }, {
    key: 'setSessionData',
    value: function setSessionData(session) {
      localStorage.setItem(this.key, session.toString());
      return true;
    }
  }, {
    key: 'deleteSessionData',
    value: function deleteSessionData() {
      localStorage.removeItem(this.key);
      this.setSessionData(new _sessionData.SessionData({}));
      return true;
    }

    // checkForLegacyDataAndMigrate(): Promise<SessionData> {
    //   const legacyTransitKey = localStorage.getItem(BLOCKSTACK_APP_PRIVATE_KEY_LABEL)
    //   const legacyGaiaConfig = localStorage.getItem(BLOCKSTACK_GAIA_HUB_LABEL)
    //   const legacyUserData = localStorage.getItem(BLOCKSTACK_STORAGE_LABEL)
    //
    //
    //   if (legacyTransitKey) {
    //     localStorage.removeItem(BLOCKSTACK_APP_PRIVATE_KEY_LABEL)
    //   }
    //
    //
    //
    // }

  }]);

  return LocalStorageStore;
}(SessionDataStore);